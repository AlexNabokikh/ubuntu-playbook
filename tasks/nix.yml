---
- name: Ensure Nix user exists
  become: true
  ansible.builtin.user:
    name: "{{ username }}"
    state: present
  register: nix_user_details

- name: Initialize XDG user config dir variable
  ansible.builtin.set_fact:
    xdg_user_config_dir: ""

- name: Set fact for XDG user config dir
  ansible.builtin.shell: echo $XDG_CONFIG_HOME
  register: xdg_config_home_shell
  when: username == lookup('env', 'USER')

- name: Set fact for XDG user config dir from shell output
  ansible.builtin.set_fact:
    xdg_user_config_dir: "{{ xdg_config_home_shell.stdout }}"
  when: xdg_config_home_shell.stdout != ""

- name: Use fallback default for XDG user config dir
  ansible.builtin.set_fact:
    xdg_user_config_dir: "{{ nix_user_details.home }}/.config"
  when: xdg_user_config_dir == ""

- name: Ensure Nix user config dir exists
  become: true
  ansible.builtin.file:
    path: "{{ xdg_user_config_dir }}/nix"
    state: directory
    owner: "{{ username }}"
    mode: "0755"

- name: Ensure Nix directory exists
  become: true
  ansible.builtin.file:
    path: "/nix"
    owner: "{{ username }}"
    state: directory
    mode: "0755"
  register: nix_directory

- name: Set should_install_nix fact based on Nix directory status
  ansible.builtin.set_fact:
    should_install_nix: "{{ nix_directory.changed }}"

- name: Create /nix bind mount
  when: nix_bind_mount | default("") != ""
  block:
    - name: Check if bind mount target directory is present
      ansible.builtin.stat:
        path: "{{ nix_bind_mount }}"
      register: nix_bind_mount_stat

    - name: Create bind mount target directory if not exists
      become: true
      ansible.builtin.file:
        path: "{{ nix_bind_mount }}"
        owner: "{{ username }}"
        state: directory
        mode: "0755"
      when: not nix_bind_mount_stat.stat.exists

    - name: Bind mount /nix to target directory
      become: true
      ansible.posix.mount:
        path: "{{ nix_bind_mount }}"
        src: "/nix"
        opts: bind
        state: mounted
        fstype: none

- name: Install Nix if needed
  when: should_install_nix
  block:
    - name: Download Nix installer script
      ansible.builtin.get_url:
        url: "https://nixos.org/nix/install"
        dest: "/tmp/install_nix.sh"
        mode: "0755"

    - name: Run Nix installer script
      become: true
      become_user: "{{ username }}"
      ansible.builtin.command: "/tmp/install_nix.sh"
      args:
        creates: "/nix/store"

    - name: Source the nix.sh script
      shell: |
        . "/home/{{ username }}/.nix-profile/etc/profile.d/nix.sh"
      args:
        executable: /bin/bash

- name: Install Nix packages
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "/home/{{ username }}/.nix-profile/bin/nix-env -iA nixpkgs.{{ item }}"
  loop: "{{ nix_packages }}"
